40 JSP 시작하기

지난시간 까지는 자바를 이용해서 웹개발을 할때는 서블릿이라는 플랫폼을 이용해서 프로그램을 만들었는데 거기다가 하나 더붙일것이다. 알바생인 Jasper를 붙이자. 
Jasper를 이용해서 서블릿을 쉽게 만들어보자, 세상에서는 Jasper라고 안부르고 JSP라고 부른다.

JSP를 쓰면 이점이 뭘까? 왜 써야할까?

프로그램을 만들게되면 사용자에게 응답을하게되면서 결과물을 돌려줄텐데 웹문서로 결과물을 줄것이다.
SUM:12 이런식으로 간단한 형태의 문자열을 문서로 보내는거라면 JSP를 사용하지 않아도 된다.

복잡한형태에 HTML구문을 이용해서 브라우저에게 보여주고 브라우저는 HTML문서를 읽어서 복잡하게 보내준다.
HTML문서를 out.write를 이용해서 한줄한줄 보내줬었어야했다. 과거에는 이런 노가다성작업을 필요로했었다.
자바는 Jasper라는 알바생을 두고있다 jasper라는 알바생을 두고나서 프로그램을 만들게 되면 어떻게 달라지냐면
그냥 html문서를 주면 작업을 수행할수있다. html문서를 write를 붙여서 서블릿 문서로 만들어달라고 하면된다.
JSP에게 일을 어떻게 시킬까? 확장자만 jsp로 붙여주면된다. ex) add.jsp 

제스퍼는 언제 서블릿코드로 바꿔줄까. 사용자가 확장자를 갖고있는 페이지를 요청할때 바꿔준다. 또한 url매핑은 파일명 그대로 매핑이된다. servlet은 따로 매핑해서 파일명과 url이 다른경우가 있었지만 JSP같은경우는 파일명이 곧 url이다.
실제로 만들어진 서블릿코드는 add.jsp라는 이름을 갖지않고

톰캣 설치 디렉토리 아래에 add_jsp.java라는 이름을 갖게된다.
\work\Catalina\localhost\newlec\org\apache\jsp\add_jsp.java

calc3.html을 복사해서 calculator.jsp로 바꾸고 실행을 해보도록 하자. 잘실행이 된다. 특별하게 다를것은 없지않을까?라고 이야기할수있는데 
그렇지않다.
<td class="output" colspan="4">${3+4}</td> 
다름을 증명하기위해서 이렇게 바꿀것이다. 그냥 html이면 글자 그대로 나오게 될것이고 아니고 JSP이면 그 결과물 7을 출력하게 될것이다.
7을 제대로 출력했다. 분명히 서블릿코드로 만들었다. 

서블릿이라는 코드를 만들었다면 결과물을 볼수있을까?
서버탭에서 서버를 더블 클릭을하거나 서버에 오른쪽 마우스 오픈 누르면 되면 서버의 설정이 열리게된다.
한가지 알고있어야하는점은 우리는 코드를 이클립스안에 src나 webContent에서 코드를 만들고,파일을 추가하고나서, ctrl+f11을 눌러서 브라우저에서 열어보게 되는데 
처음 입문한사람이 착각하는것은 src나 WebContent가 홈브라우저 인줄 아는것이다. 서비스되고있는 파일이 그곳을 참고하는게아니다. 이곳은 개발할때 사용되는 개발디렉토리이다.
이것을 실행하겠다고하면 배포하게된다. 배포하게되면 톰캣의 홈디렉토리로 옮겨지게된다. 사용하고있는 톰캣이 실제 다른서비스를 운영할수있기때문에 실제톰캣의 워크디렉토리에두지않고
별도의 복사본 이클립스가 관리하는 별도의 운영을 위한 별도의 사본을 만들게된다. 그녀석은 Server Path에 있다.

workspace\metadata\plugins\wst.server.core\temp
안에 있다.
work는 제스퍼가 일하는 작업실이다. 제스퍼가 만들어낸 파일을 확인할수있다. 계속들어가보면 calculator_jsp.java라는 파일을 볼수있다 이파일이 제스퍼가 만든 파일이다.


JSP는 변경된 점이있으면 제스퍼는 다시 만들어준다 그래서 서버를 재시작할 필요가 없다. 


int x=3;
int y=4;
<li><label for ="x">X : </label><input name="x" /></li>
라는 코드를 작성했을때 int x =3; int y=4 ;도 JSP는 화면에 그냥 출력해버린다. 하지만 변수기 때문에 화면에 출력하면 안된다. 그냥 
그럴때는
<%
int x=3;
int y=4;
%>
<%%>: 코드블럭
를 붙여주면 코드다 서블릿 안에다 자바 코드를 넣는다는 의미이다. 이것이  서블릿이라는 녀석을 제스퍼로 통해서 만들어주는 방법이다.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

41 JSP의 코드 블록

지난시간에 JSP를 이용해서 서블릿코드를 간접적으로 만들어봤다. 왜 그랬을까? 문서를 출력할때 방대한 html을 출력해야하므로 out.write를 붙여야해서 단순하고 반복적인 작업이기 때문이다.
자바 코드를 끼워놓고싶다라고하면 자바코드를 끼워넣을수있는 코드블럭을 지시할수 있어야한다.

코드 블록 지시 방법에 대해서 알아보도록하자
<% X+Y=3 %>				//자바코드 실행됨 출력 X
y의 값은: <% out.print(y)%>			//y의 값은: y 		
y의 값은: <%=y %>			//y의 값은: y  위와 같은 결과가 나온다.

만약에 
public int sum(int a int b)
{
	return a+b;
}
이코드를 add.jsp에 멤버 메서드로 정의하고싶다. <% %>로 코드를 감싸면 에러가 난다. 왜냐면 일반적 코드블럭을 쓰게되면 서비스함수에 들어가게된다.

<%! %> 를 써주면 멤버변수에 들어가게 된다.

<%@ %>: 일반적으로 자바코드가 아니며, 페이지 지시자 블록, 키와 값으로 이뤄져있으며 페이지를 어떤형태의 인코딩방식, 컨텐트타입등등을 지시하는것이다.
 (지시블럭)
코드지시자를 통해서 쓰게되면 어떤코드보다도 앞서 진행된다.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

42 JSP의 내장객체 간단히 알아보기

JSP가 갖고있는 내장객체를 알아보자 JSP를 만들면서  page라는 변수를 선언하면 에러가난다.
왜냐면 코드블럭외에 코드가 있다는 뜻이다.JSP가 만들어낸 서블릿에서는 그런 변수들이 있을수 있다는 것이다.
확인해보니까 JSP는 서비스함수를 만들면서 자기가 필요한 변수를 만들어낸다. 그중에 page라는 변수가 있어서 에러가 나는것이다.

Jsp를 만들게되면 서블릿안에 변수들을 들여다 볼 필요가있다.

public void_jspService(final javax.servlet.http.HttpServletRequest request, final 
javax.servlet.http.HttpServletResponse response) 
	throw java.io.IOException, javax.servlet.ServletException{		//변수들은 객체를 가르치는 개체의 형식이다.
 		final javax.servlet.jsp.PageContext pageContext;
		javax.servlet.http.HttpSession session =null;
		final javax.servlet.ServletContext application;
		final javax.servlet.ServletConfig config;
		javax.servlet.jsp.JspWriter out = null;
		final java.lang.Object page=this;
		javax.servlet.jsp.JspWriter _jspx_out =null;
		javax.servlet.jsp.PageContext _jspx_page_context =null;

JSP에서 만들어놓은 변수들은 내장객체(built in object)라고 부른다.
-request				//입력 도구
-response				//출력 도구
-pageContext			// Session이나 Application처럼 페이지내에서 임시로 데이터를저장setattribute,getAttribute를 가진	pageContext는 내부에서만 사용함
-session				//session 객체 ServletContext는 전역적으로사용
-application			//application객체
-config		
-out				//출력 도구
-page 				//이 page의 객체를 참조하는  object형 page변수
이 녀석들은 우리들이 알아 놓아야한다. JSP에서 코드블럭을 만들때 적절히 활용해서 프로그램을 만들수있어야한다.




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
